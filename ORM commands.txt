python manage.py shell

>>> from news.models import News, Category
>>> News.objects.all() - получение всех объектов из Модели
>>> News.objects.order_by('pk') - сортировка по pk
>>> News.objects.all().reverse() - обратный порядок сортирки всех
>>> News.objects.get(pk=1) - вызвать запись №1, только одна запись!!!
>>> News.objects.get(title='Новость 5')  -
>>> news5 = _ - присвоить переменной news5 последнее полученое значение
>>> news5 - получить значение переменной news5
>>> news5.is_publishes - получение знаниея поля записи
>>> news5.category - возвращает текстовое значение поля, а не номер, т.к. в моделе есть декоратор __str__
>>> news5.category.pk - получаем его атрибут
>>> news5.category.title - получаем его атрибут
>>> cat4 = Category.objects.get(pk=4) - получаем объект категирия
>>> cat4.news_set.all() - методом <имя модели>_set (в Django по умолчанию, но можно и переопределить в моделе атрибутом related_name='' получаем данные из вторичной модели
>>> news = _ - сохраняем в переменную news
>>> print(news[0]) - выдодим первое значение из списка
>>> cat2 = Category.objects.get(pk=2)
>>> news = cat2.news_set.all() - получаем все новости связанные с категорией cat2 получений по (pk2)
>>> for item in news:
...     print(item.title, item.is_publishes) - получает поля всех записей
...
>>> News.objects.filter(pk__gt=12) - вызов записей где pk > 12, фильтр __gt или __gte больше или равно
>>> News.objects.filter(title__contains='Новость') - выборка по образцу чувствительна к кодировке и регистру
>>> News.objects.filter(pk__in=[9,10,11]) - выбор определенных записей
>>> News.objects.filter(pk__in=[9,10,11], title__contains='формы') - комбинированый логическое И
>>> News.objects.first() - получение первой записи из модели
>>> News.objects.order_by('pk').first() - сортировка и получение первого по pk
>>> News.objects.earliest('updated_at') - получение записи с самой ранней датой, для полей с датой.

>>> cats = Category.objects.filter(pk__in=[1,3]) - получаем список сатегорий с номерами 1 и 3
>>> News.objects.filter(categogy__in=cats) - получаем список новостей с категориями из списка 'cats'

>>> cat1 =  Category.objects.get(pk=1) - получаем категорию с pk=1
>>> cat1.news_set.exists() - проверяем есть ли записи в News с категорией cat1
>>> cat1.news_set.count() - получаем количество записей в News с категирией cat1

>>> news = News.objects.get(pk=8) - записываем в news запись 8
>>> news.get_previous_by_created_at() - вызываем предидущую запись записи 8, по полю дата создания.
>>> news.get_next_by_created_at() - или следующую
>>> news.get_next_by_created_at(pk__gt=10, title__contains=7) - добавляем фильтры, номер больше 7, в названии есть 7

>>> News.objects.filter(category__title = 'Политика') - получение всех записей по ключу первичной модели
>>> Category.objects.filter(news__title__contains='формы') - получение всех записей вторичной модели по ключу вторичной с фильтром по содержанию
>>> Category.objects.filter(news__title__contains='формы').distinct - тоже но только уникальные значания

>>> from django.db.models import Q - клас позволяет добавлять логику '|' - или '~' - не '&' - and
>>> News.objects.filter(Q(pk__in=[5, 6]) | Q(title__contains='2')) - фильтруем по pk= 5 и 6 у которых в заголовке есть 2
>>> News.objects.filter(Q(pk__in=[5, 6]) | Q(title__contains='2') & ~ Q(pk__lt=4) )  - тоже но pk больше 4

>>> from news.models import *
>>> News.objects.all() [:3] - получаем последние три записи
>>> News.objects.all() [10:] - все после 10-ой
>>> News.objects.all() [3:5] - с третей по пятую

>>> from django.db.models import *
>>> News.objects.aggregate(Min('views'), Max('views')) - нахидим минимальное и максимальное значение по полю
>>> News.objects.aggregate(min_views = Min('views'), max_views =  Max('views')) тоже с именованными ответами
>>> News.objects.aggregate(diff = Min('views') -  Max('views')) - разница
>>> News.objects.aggregate(Sum('views')) - сумма всех записей
>>> News.objects.aggregate(Avg('views')) - среднее всех
>>> News.objects.aggregate(Count('views')) - количество всех

>>> cats = Category.objects.annotate(Count('news')) - подсчет записей News для каждой категории
>>> for item in cats:
...     print(item.title, item.news__count) - вывод данных

>>> cats = Category.objects.annotate(max_views=Max('news__views'))  - подсчет максимальных значений по каждой категории
>>> for item in cats:
...     print(item.title, item.max_views)  - вывод данных
...

>>> cats = Category.objects.annotate(sum_views=Sum('news__views'))  - подсчет суммы значений по каждой категории
>>> for item in cats:
...       print(item.title, item.sum_views)  - вывод данных
...

>>> cats = Category.objects.annotate(cnt=Count('news')).filter(cnt__gt=0) - вывод количества новостей, больше нуля
>>> for item in cats:
...      print(item.title, item.cnt)  - вывод данных
...

>>> News.objects.aggregate(cnt=Count('views', distinct=True)) - вывод количествва записей с уникальными значениями
















